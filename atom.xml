<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abelable</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-27T03:46:33.295Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Abelable</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端常用场景函数封装及常用API</title>
    <link href="http://yoursite.com/2019/03/27/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%9C%BA%E6%99%AF%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E5%8F%8A%E5%B8%B8%E7%94%A8API/"/>
    <id>http://yoursite.com/2019/03/27/前端常用场景函数封装及常用API/</id>
    <published>2019-03-27T01:21:19.000Z</published>
    <updated>2019-03-27T03:46:33.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typeOf</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line">  <span class="keyword">const</span> map = &#123;</span><br><span class="line">    <span class="string">'[object Boolean]'</span>: <span class="string">'boolean'</span>,</span><br><span class="line">    <span class="string">'[object Number]'</span>: <span class="string">'number'</span>,</span><br><span class="line">    <span class="string">'[object String]'</span>: <span class="string">'string'</span>,</span><br><span class="line">    <span class="string">'[object Function]'</span>: <span class="string">'function'</span>,</span><br><span class="line">    <span class="string">'[object Array]'</span>: <span class="string">'array'</span>,</span><br><span class="line">    <span class="string">'[object Date]'</span>: <span class="string">'date'</span>,</span><br><span class="line">    <span class="string">'[object RegExp]'</span>: <span class="string">'regExp'</span>,</span><br><span class="line">    <span class="string">'[object Undefined]'</span>: <span class="string">'undefined'</span>,</span><br><span class="line">    <span class="string">'[object Null]'</span>: <span class="string">'null'</span>,</span><br><span class="line">    <span class="string">'[object Object]'</span>: <span class="string">'object'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> map[toString.call(obj)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类型判断&quot;&gt;&lt;a href=&quot;#类型判断&quot; class=&quot;headerlink&quot; title=&quot;类型判断&quot;&gt;&lt;/a&gt;类型判断&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端常用场景函数封装及常用API</title>
    <link href="http://yoursite.com/2019/03/27/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8API%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%9C%BA%E6%99%AF%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2019/03/27/前端常用API及常用场景函数封装/</id>
    <published>2019-03-27T01:21:19.000Z</published>
    <updated>2019-03-27T04:27:57.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typeOf</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line">  <span class="keyword">const</span> map = &#123;</span><br><span class="line">    <span class="string">'[object Boolean]'</span>: <span class="string">'boolean'</span>,</span><br><span class="line">    <span class="string">'[object Number]'</span>: <span class="string">'number'</span>,</span><br><span class="line">    <span class="string">'[object String]'</span>: <span class="string">'string'</span>,</span><br><span class="line">    <span class="string">'[object Function]'</span>: <span class="string">'function'</span>,</span><br><span class="line">    <span class="string">'[object Array]'</span>: <span class="string">'array'</span>,</span><br><span class="line">    <span class="string">'[object Date]'</span>: <span class="string">'date'</span>,</span><br><span class="line">    <span class="string">'[object RegExp]'</span>: <span class="string">'regExp'</span>,</span><br><span class="line">    <span class="string">'[object Undefined]'</span>: <span class="string">'undefined'</span>,</span><br><span class="line">    <span class="string">'[object Null]'</span>: <span class="string">'null'</span>,</span><br><span class="line">    <span class="string">'[object Object]'</span>: <span class="string">'object'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> map[toString.call(obj)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类型判断&quot;&gt;&lt;a href=&quot;#类型判断&quot; class=&quot;headerlink&quot; title=&quot;类型判断&quot;&gt;&lt;/a&gt;类型判断&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信小程序开发整理总结</title>
    <link href="http://yoursite.com/2019/03/14/WeChat-applet/"/>
    <id>http://yoursite.com/2019/03/14/WeChat-applet/</id>
    <published>2019-03-14T02:05:08.751Z</published>
    <updated>2019-03-25T09:48:39.877Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端基础整理</title>
    <link href="http://yoursite.com/2018/07/22/Interview-questions/"/>
    <id>http://yoursite.com/2018/07/22/Interview-questions/</id>
    <published>2018-07-22T00:57:54.225Z</published>
    <updated>2019-03-27T05:16:10.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML和CSS部分"><a href="#HTML和CSS部分" class="headerlink" title="HTML和CSS部分"></a><strong>HTML和CSS部分</strong></h2><h3 id="实现垂直居中"><a href="#实现垂直居中" class="headerlink" title="实现垂直居中"></a>实现垂直居中</h3><ul><li>绝对定位+负外边距</li><li><p>绝对定位+transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    transform：translateY(-50%);</span><br><span class="line">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>flex布局: alien-items: center;</p></li></ul><h2 id="JavaScript部分"><a href="#JavaScript部分" class="headerlink" title="JavaScript部分"></a>JavaScript部分</h2><h3 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h3><ul><li>typeof<ul><li>判断基本类型</li><li>null除外，会显示object（这是一个bug）</li><li>能判断function（不推荐，存在浏览器兼容问题）</li></ul></li><li><p>instanceof</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> <span class="built_in">Array</span>) </span><br><span class="line"><span class="built_in">console</span>.log(d <span class="keyword">instanceof</span> <span class="built_in">Date</span>) </span><br><span class="line"><span class="built_in">console</span>.log(e <span class="keyword">instanceof</span> <span class="built_in">Function</span>)</span><br></pre></td></tr></table></figure></li><li><p>constructor（在类继承时会出错，不推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(c.constructor === <span class="built_in">Array</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d.constructor === <span class="built_in">Date</span>); </span><br><span class="line"><span class="built_in">console</span>.log(e.constructor === <span class="built_in">Function</span>);</span><br></pre></td></tr></table></figure></li><li><p>prototype（繁琐，不推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(a) === <span class="string">'[object String]'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(b) === <span class="string">'[object Number]'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(c) === <span class="string">'[object Array]'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(d) === <span class="string">'[object Date]'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(e) === <span class="string">'[object Function]'</span>);</span><br></pre></td></tr></table></figure></li><li><p><a href="http://www.runoob.com/jquery/misc-type.html" target="_blank" rel="noopener">jQuery.type()</a></p></li></ul><h3 id="常用字符串方法"><a href="#常用字符串方法" class="headerlink" title="常用字符串方法"></a>常用字符串方法</h3><ul><li><code>slice()</code> – 提取字符串的一部分，并返回一个新字符串。</li><li><code>split()</code> – 通过将字符串划分成子串，将一个字符串做成一个字符串数组。</li><li><code>concat()</code> – 将两个或多个字符的文本组合起来，返回一个新的字符串。</li><li><code>replace()</code> – 用来查找匹配一个正则表达式的字符串，然后使用新字符串代替匹配的字符串。</li><li><code>search()</code> – 执行一个正则表达式匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1 。</li><li><code>match()</code> – 检查一个字符串是否匹配一个正则表达式。</li><li><code>toLowerCase()</code> – 将整个字符串转成小写字母。</li><li><code>toUpperCase()</code> – 将整个字符串转成大写字母</li><li><code>charAt()</code> – 返回指定位置的字符。</li><li><code>substring()</code> – 返回字符串的一个子串。传入参数是起始位置和结束位置。</li><li><code>substr()</code> - 返回从string的startPos位置，长度为length的字符串</li><li><code>indexOf()</code> – 返回字符串中一个子串第一处出现的索引。如果没有匹配项，返回 -1 。</li><li><code>lastIndexOf()</code> – 返回字符串中一个子串最后一处出现的索引，如果没有匹配项，返回 -1 。</li></ul><h3 id="常用数组方法"><a href="#常用数组方法" class="headerlink" title="常用数组方法"></a>常用数组方法</h3><ul><li><code>slice()</code> – 从某个已有的数组返回选定的元素</li><li><a href="http://www.w3school.com.cn/jsref/jsref_splice.asp" target="_blank" rel="noopener"><code>splice()</code></a> – 删除元素，并向数组添加新元素。</li><li><code>push()</code> – 向数组的末尾添加一个或更多元素，并返回新的长度。</li><li><code>pop()</code> – 删除并返回数组的最后一个元素。</li><li><code>shift()</code> – 删除并返回数组的第一个元素。</li><li><code>unshift()</code> – 向数组的开头添加一个或更多元素，并返回新的长度。</li><li><code>join()</code> – 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</li><li><code>concat()</code> – 连接两个或更多的数组，并返回结果。</li><li><code>reverse()</code> – 颠倒数组中元素的顺序。</li><li><code>sort()</code> – 对数组的元素进行排序。</li><li><code>toString()</code> – 把数组转换为字符串，并返回结果。</li><li><code>toLocaleString()</code> – 把数组转换为本地数组，并返回结果。</li><li><code>forEach()</code> – 对数组的每一项运行给定函数，这个方法没有返回值。</li><li><code>filter()</code> – 对数组中的每一项运行给定函数，返回该函数会返回true的项组成数组。</li><li><code>map()</code> – 对数组的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li><li><code>every()</code> – 对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。</li><li><code>some()</code> – 对数组的每一项运行给定参数，如果该函数对任一项返回true，则返回true。以上方法都不会修改数组中的包含的值。</li><li><code>reduce()和reduceRight()</code>    – 缩小数组的方法，这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。</li></ul><h3 id="常用的DOM方法和DOM属性"><a href="#常用的DOM方法和DOM属性" class="headerlink" title="常用的DOM方法和DOM属性"></a>常用的DOM方法和DOM属性</h3><ul><li>创建节点方法<ul><li><code>document.createElement()</code> – 创建一个元素节点</li><li><code>document.createTextNode()</code> – 创建一个文本节点</li><li><code>document.createDocumentFragment()</code> – 创建一个DOM片段</li></ul></li><li>获取元素节点方法<ul><li><code>document.getElementById()</code> – 返回对拥有指定<code>id</code>的第一个对象的引用。</li><li><code>document.getElementsByTagName()</code> – 返回带有指定<code>标签名</code>的对象集合。</li><li><code>document.getElementsByName()</code> – 返回带有指定<code>Name属性</code>的对象集合。</li><li><code>document.querySelector()</code> - 返回匹配的第一个元素</li><li><code>document.querySelectorAll()</code> - 返回匹配的所有元素</li><li><code>element.firstChild</code> – 获得该节点第一个子节点。</li><li><code>element.lastChild</code> – 获得该节点的最后一个子节点。</li><li><code>element.parentNode()</code> – 获得该节点的父节点。</li><li><code>element.nextSibling</code> – 返回该节点的下一个兄弟节点。</li><li><code>element.previousSibling</code> – 返回该节点的上一个兄弟节点。</li></ul></li><li>操作节点方法<ul><li><code>element.appendChild()</code> – 在该节点所有子节点的最后加入一个子节点。</li><li><code>element.insertBefore(new,old)</code> – 在该节点的指定子节点前加入一个子节点。</li><li><code>element.removeChild()</code> – 删除该节点的指定子节点。</li><li><code>element.replaceChild(new,old)</code> – 替换该节点的指定子节点。</li><li><a href="http://www.w3school.com.cn/jsref/met_node_clonenode.asp" target="_blank" rel="noopener"><code>element.cloneNode(boolean)</code></a> – 复制指定节点并返回。参数可选，默认是 false。</li></ul></li><li>操作节点属性方法<ul><li><code>element.getAttribute()</code> – 获取节点的属性值</li><li><code>element.setAttribute()</code> – 设置节点的属性</li><li><code>element.removeAttribute()</code> – 移除节点的属性</li></ul></li><li>常用节点属性<ul><li><code>element.nodeName</code> – 其内容是给定节点的名字。</li><li><code>element.nodeType</code> – 返回一个整数，这个数值代表着给定节点的类型。<code>1</code>– 元素节点 <code>2</code>– 属性节点 <code>3</code>– 文本节点</li><li><code>element.nodeValue</code> – 返回给定节点的当前值（字符串）。</li><li><code>element.innerHTML</code> – 设置节点的内容</li></ul></li></ul><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p><img src="https://i.imgur.com/pBDopux.png" alt=""></p><ul><li>实例、构造函数、原型之间的关系<ul><li>实例通过构造函数加new创建：person = new Person()</li><li>通过构造函数的prototype属性可以访问原型：Person.prototype</li><li>实例的__proto__属性指向原型：person.__proto__ = Person.prototype</li><li>原型的constructor属性指向构造函数：Person.prototype.constructor = Person</li></ul></li><li>原型链：是指对象与对象之间的直接关系<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = clone(b); <span class="comment">//将b对象作为a对象的原型，实现继承</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.create(obj);</span><br><span class="line">  <span class="comment">// 等同于</span></span><br><span class="line">  <span class="comment">// var ret = &#123;&#125;;</span></span><br><span class="line">  <span class="comment">// ret.__proto__ = obj;</span></span><br><span class="line">  <span class="comment">// return ret;</span></span><br><span class="line">  <span class="comment">// 或者</span></span><br><span class="line">  <span class="comment">// function Noop() &#123;&#125;</span></span><br><span class="line">  <span class="comment">// Noop.prototype = obj;</span></span><br><span class="line">  <span class="comment">// return new Noop();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h3><ul><li><p>this指函数被调用时的<code>上下文对象</code></p><blockquote><p>this既不指向函数本身，也不指向函数的词法作用域</p></blockquote></li><li><p>常见的4种this场景</p><ul><li><p>默认绑定：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接在全局环境中调用函数，this指向全局对象，严格模式下返回undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">6</span>;</span><br><span class="line">foo() <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li><li><p>上下文对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用对象的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">16</span>,</span><br><span class="line">  foo: foo</span><br><span class="line">&#125;;</span><br><span class="line">obj.foo(); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure></li><li><p>隐式丢失：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不论函数是否是在对象中声明的，函数本身实际上并不属于该对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a: <span class="number">2</span>,</span><br><span class="line">foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'oops, global'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种场景</span></span><br><span class="line"><span class="keyword">var</span> bar = obj.foo; </span><br><span class="line">bar(); <span class="comment">// 'oops, global'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种场景</span></span><br><span class="line">doFoo(obj.foo); <span class="comment">// 'oops, global'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doFoo</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>call、apply、bind</p></li><li>new</li></ul></li></ul><h3 id="立即执行函数与闭包"><a href="#立即执行函数与闭包" class="headerlink" title="立即执行函数与闭包"></a>立即执行函数与闭包</h3><ol><li>立即执行函数与闭包在定义上是有区别的<ul><li>立即执行函数：是指声明完之后便直接执行的函数，通常为匿名函数</li><li>闭包：是指有权访问另一个函数作用域内变量的函数</li></ul></li><li><p>立即执行函数的应用场景</p><ul><li>模块模式：用立即执行函数处理模块化可以减少全局变量造成的空间污染，构造更多的私有变量。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  retutn &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      i = val;</span><br><span class="line">    &#125;,</span><br><span class="line">    increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ++i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">counter.get(); <span class="comment">// 0</span></span><br><span class="line">counter.set(<span class="number">3</span>);</span><br><span class="line">counter.increment(); <span class="comment">// 4</span></span><br><span class="line">counter.increment(); <span class="comment">// 5</span></span><br><span class="line">counter.i; <span class="comment">// undefined i并不是counter的属性</span></span><br><span class="line">i; <span class="comment">// ReferenceError: i is not defined (函数内部的是局部变量)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>闭包的应用场景：由于作用域的限制，外部无法访问函数内部的变量，闭包的应用就是为了提供访问函数内部变量的解决方案</p><blockquote><p>滥用闭包会造成内存泄漏，因为内部变量得不到释放</p></blockquote></li><li><p>对于经典面试题的思考：立即执行函数就是闭包吗？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( i );</span><br><span class="line">&#125;, i*<span class="number">1000</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解决方案</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;, j * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTML和CSS部分&quot;&gt;&lt;a href=&quot;#HTML和CSS部分&quot; class=&quot;headerlink&quot; title=&quot;HTML和CSS部分&quot;&gt;&lt;/a&gt;&lt;strong&gt;HTML和CSS部分&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;实现垂直居中&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动端音乐播放器（MobileWeb）</title>
    <link href="http://yoursite.com/2018/07/16/vue-music/"/>
    <id>http://yoursite.com/2018/07/16/vue-music/</id>
    <published>2018-07-15T17:37:15.352Z</published>
    <updated>2019-03-26T09:10:04.978Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>项目源码：<a href="https://github.com/Abelable/vue-music" target="_blank" rel="noopener">https://github.com/Abelable/vue-music</a></p></blockquote><h2 id="项目中用的技术栈"><a href="#项目中用的技术栈" class="headerlink" title="项目中用的技术栈"></a>项目中用的技术栈</h2><ul><li><code>Vue</code>：MVVM框架</li><li><code>Vue-Router</code>：前端路由</li><li><code>Vuex</code>：状态管理</li><li><code>Webpack</code>：构建工具</li><li><code>ES6</code>：源码</li><li><code>Stylus</code>：CSS预处理工具</li><li><code>axios + Node.js</code>：代理后端请求</li></ul><h2 id="项目中用到的第三方库"><a href="#项目中用到的第三方库" class="headerlink" title="项目中用到的第三方库"></a>项目中用到的第三方库</h2><ul><li><a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">better-scroll</a></li><li><a href="https://github.com/webmodules/jsonp" target="_blank" rel="noopener">jsonp</a></li><li><a href="https://github.com/ustbhuangyi/lyric-parser" target="_blank" rel="noopener">lyric-parser</a></li><li><a href="https://github.com/dankogai/js-base64" target="_blank" rel="noopener">js-base64</a></li><li><a href="https://github.com/ustbhuangyi/storage" target="_blank" rel="noopener">storage</a></li><li><a href="https://github.com/HenrikJoreteg/create-keyframe-animation" target="_blank" rel="noopener">create-keyframe-animation</a></li></ul><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><ul><li><strong>推荐页</strong><ul><li>上部分是一个轮播图组件，使用第三方库<code>better-scroll</code>辅助实现，使用<code>jsonp</code>抓取 QQ音乐(移动端)数据</li><li>下部分是一个歌单推荐列表，使用<code>axios + Node.js</code>代理后端请求，绕过主机限制 (伪造 headers)，抓取 QQ音乐(PC端)数据</li><li>歌单推荐列表图片，使用图片懒加载技术<code>vue-lazyload</code>，优化页面加载速度</li><li>为了更好的用户体验，当数据未请求到时，显示<code>loading</code>组件</li></ul></li><li><strong>推荐页 → 歌单详情页</strong><ul><li>由于歌手的状态较为复杂，这里使用<code>vuex</code>集中管理歌手状态</li><li>这个组件更加注重UX，做了很多类原生APP动画，如下拉图片放大、跟随推动、ios渐进增强的高斯模糊效果<code>backdrop-filter</code>等</li></ul></li><li><strong>歌手页</strong><ul><li>左右联动是这个组件的难点</li><li>左侧是一个歌手列表，使用<code>jsonp</code>抓取QQ音乐(PC端)歌手数据并重组 JSON 数据结构</li><li>列表图片使用懒加载技术<code>vue-lazyload</code>，优化页面加载速度</li><li>右侧是一个字母列表，与左侧歌手列表联动，滚动固定标题实现</li></ul></li><li><strong>歌手页 → 歌手详情页</strong><ul><li>复用歌单详情页，只改变传入的参数，数据同样爬取自QQ音乐</li></ul></li><li><strong>播放器内核页</strong><ul><li>核心组件。用<code>vuex</code>管理各种播放时状态，播放、暂停等功能调用<a href="http://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp" target="_blank" rel="noopener">audio API</a></li><li>播放器可以最大化和最小化</li><li>中部唱片动画使用第三方 JS 动画库<code>create-keyframe-animation</code>实现</li><li>底部操作区图标使用<code>iconfonts</code>。</li><li>抽象了一个横向进度条组件和一个圆形进度条组件，横向进度条可以拖动小球和点击进度条来改变播放进度，圆形进度条组件使用 SVG<code>&lt;circle&gt;</code>元素</li><li>播放模式有：顺序播放、单曲循环、随机播放，原理是调整歌单列表数组</li><li>歌词的爬取利用<code>axios</code>代理后端请求，伪造<code>headers</code>来实现，先将歌词<code>jsonp</code>格式转换为<code>json</code>格式，再使用第三方库<code>js-base64</code>进行<code>Base64</code>解码操作，最后再使用第三方库<code>lyric-parser</code>对歌词进行格式化</li><li>实现了侧滑显示歌词、歌词跟随进度条高亮等交互效果</li><li>增加了当前播放列表组件，可在其中加入/删除歌曲</li></ul></li><li><strong>排行页</strong><ul><li>普通组件（略）</li></ul></li><li><strong>排行页 → 歌单详情页</strong><ul><li>复用歌单详情页（略）</li></ul></li><li><strong>搜索页</strong><ul><li>抓数据，写组件，另外，根据抓取的数据特征，做了上拉刷新的功能</li><li>考虑到数据量大且频繁的问题，对请求做了节流处理</li><li>考虑到移动端键盘占屏的问题，对滚动前的<code>input</code>做了<code>blur()</code>操作</li><li>对搜索历史进行了<code>localstorage</code>缓存，清空搜索历史时使用了改装过的<code>confirm</code>组件</li><li>支持将搜索的歌曲添加到播放列表</li></ul></li><li><strong>个人中心</strong><ul><li>将<code>localstorage</code>中 “我的收藏” 和 “最近播放” 反映到界面上</li></ul></li><li><strong>其他</strong><ul><li>此应用的全部数据来自QQ音乐，推荐页的歌单列表及歌词是利用<code>axios</code>结合<code>node.js</code>代理后端请求抓取的。</li><li>全局通用的应用级状态使用<code>vuex</code>集中管理</li><li>全局引入<code>fastclick</code>库，消除<code>click</code>移动浏览器300ms延迟</li><li>页面是响应式的，适配常见的移动端屏幕，采用<code>flex</code>布局</li></ul></li></ul><h2 id="学习参考"><a href="#学习参考" class="headerlink" title="学习参考"></a>学习参考</h2><ul><li><a href="https://coding.imooc.com/class/107.html" target="_blank" rel="noopener">Vue 2.0高级实战 开发移动端音乐WebAPP</a></li><li><a href="https://github.com/Aaron0525/Vue-music" target="_blank" rel="noopener">Vue2.0搭建的移动端音乐APP</a></li><li><a href="https://www.jianshu.com/p/bee0ed707987" target="_blank" rel="noopener">Vue-music 小知识点</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;项目源码：&lt;a href=&quot;https://github.com/Abelable/vue-music&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Abelable/vue-music&lt;/a
      
    
    </summary>
    
    
  </entry>
  
</feed>
