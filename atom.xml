<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abelable</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-22T01:21:35.556Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Abelable</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018年前端面试题整理</title>
    <link href="http://yoursite.com/2018/07/22/Interview-questions/"/>
    <id>http://yoursite.com/2018/07/22/Interview-questions/</id>
    <published>2018-07-22T00:57:54.225Z</published>
    <updated>2018-07-22T01:21:35.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML和CSS部分"><a href="#HTML和CSS部分" class="headerlink" title="HTML和CSS部分"></a><strong>HTML和CSS部分</strong></h2><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><ul><li>盒模型 = <code>content</code>(内容)+<code>padding</code>(内边距)+<code>border</code>(边框)+<code>margin</code>(外边距)</li></ul><h3 id="常用行内元素、块级元素、空元素（单标签元素）"><a href="#常用行内元素、块级元素、空元素（单标签元素）" class="headerlink" title="常用行内元素、块级元素、空元素（单标签元素）"></a>常用行内元素、块级元素、空元素（单标签元素）</h3><ul><li>行内元素：<code>a</code>、<code>img</code>、<code>b</code>、<code>em</code>、<code>strong</code>、<code>span</code>、<code>input</code>、<code>textarea</code>、<code>select</code>、<code>botton</code>、<code>label</code></li><li>块级元素：<code>div</code>、<code>ul</code>、<code>li</code>、<code>p</code>、<code>h1-h6</code>、<code>dl</code>、<code>dt</code>、<code>dd</code>、<code>blockquote</code></li><li>空元素：<code>br</code>、<code>hr</code>、<code>meta</code>、<code>link</code>、<code>input</code>、<code>img</code></li></ul><h3 id="实现垂直居中"><a href="#实现垂直居中" class="headerlink" title="实现垂直居中"></a>实现垂直居中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--...--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>绝对定位+负外边距</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">15%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绝对定位+transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    transform：translate(0, -50%);</span><br><span class="line">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>flex布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    display：flex;</span><br><span class="line">    <span class="selector-tag">alien-items</span>: <span class="selector-tag">center</span>;</span><br><span class="line">    <span class="selector-tag">width</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="JavaScript部分"><a href="#JavaScript部分" class="headerlink" title="JavaScript部分"></a>JavaScript部分</h2><h3 id="判断各种数据类型的方法"><a href="#判断各种数据类型的方法" class="headerlink" title="判断各种数据类型的方法"></a>判断各种数据类型的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'iamstring'</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">222</span>;</span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> e = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.name=<span class="string">"22"</span>; &#125;;</span><br></pre></td></tr></table></figure><ul><li>typeof<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//"string"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">//"number"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c); <span class="comment">//"object"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">//"object"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> e); <span class="comment">//"function"</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>1.除Object对象类型外，可以通过typeof进行判断。<br><br>2.在低版本的浏览器中，typeof存在兼容性问题，故也不建议用typeof判断function函数类型。（safari 5及之前的版本和chrome 7及之前的版本使用typeof检查正则表达式时，也返回“function”；在IE和firefox中对正则表达式应用typeof返回“object”）</p><ul><li>instanceof<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">//ture</span></span><br><span class="line"><span class="built_in">console</span>.log(d <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="comment">//ture</span></span><br><span class="line"><span class="built_in">console</span>.log(e <span class="keyword">instanceof</span> <span class="built_in">Function</span>) <span class="comment">//ture</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>constructor<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(c.constructor === <span class="built_in">Array</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(d.constructor === <span class="built_in">Date</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(e.constructor === <span class="built_in">Function</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>constructor 在类继承时会出错</p><ul><li>prototype<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(a) === <span class="string">'[object String]'</span>); <span class="comment">//ture</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(b) === <span class="string">'[object Number]'</span>); <span class="comment">//ture</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(c) === <span class="string">'[object Array]'</span>); <span class="comment">//ture</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(d) === <span class="string">'[object Date]'</span>); <span class="comment">//ture</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(e) === <span class="string">'[object Function]'</span>); <span class="comment">//ture</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>通用，但较为繁琐</p><ul><li><a href="http://www.runoob.com/jquery/misc-type.html" target="_blank" rel="noopener">jQuery.type()</a></li></ul></blockquote><h3 id="去除字符串空格"><a href="#去除字符串空格" class="headerlink" title="去除字符串空格"></a>去除字符串空格</h3><ul><li>trim()<blockquote><p>用于去除字符串首尾的空格，较为常用。</p></blockquote></li><li>replace()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去除首尾空格</span></span><br><span class="line">str = str.replace(<span class="regexp">/^\s*|\s*$/g</span>, <span class="string">""</span>);</span><br><span class="line"><span class="comment">// 去除所有空格</span></span><br><span class="line">str = str.replace(<span class="regexp">/\s*/g</span>, <span class="string">""</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="常用字符串方法"><a href="#常用字符串方法" class="headerlink" title="常用字符串方法"></a>常用字符串方法</h3><ul><li><p><code>concat()</code> – 将两个或多个字符的文本组合起来，返回一个新的字符串。</p></li><li><p><code>indexOf()</code> – 返回字符串中一个子串第一处出现的索引。如果没有匹配项，返回 -1 。</p></li><li><p><code>lastIndexOf()</code> – 返回字符串中一个子串最后一处出现的索引，如果没有匹配项，返回 -1 。</p></li><li><p><code>charAt()</code> – 返回指定位置的字符。</p></li><li><p><code>substring()</code> – 返回字符串的一个子串。传入参数是起始位置和结束位置。</p></li><li><p><code>substr()</code> - 返回从string的startPos位置，长度为length的字符串</p></li><li><p><code>slice()</code> – 提取字符串的一部分，并返回一个新字符串。</p></li><li><p><code>match()</code> – 检查一个字符串是否匹配一个正则表达式。</p></li><li><p><code>replace()</code> – 用来查找匹配一个正则表达式的字符串，然后使用新字符串代替匹配的字符串。</p></li><li><p><code>search()</code> – 执行一个正则表达式匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1 。</p></li><li><p><code>split()</code> – 通过将字符串划分成子串，将一个字符串做成一个字符串数组。</p></li><li><p><code>toLowerCase()</code> – 将整个字符串转成小写字母。</p></li><li><p><code>toUpperCase()</code> – 将整个字符串转成大写字母</p></li></ul><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr)); <span class="comment">//ES6</span></span><br></pre></td></tr></table></figure><h3 id="常用数组方法"><a href="#常用数组方法" class="headerlink" title="常用数组方法"></a>常用数组方法</h3><ul><li><p><code>concat()</code> – 连接两个或更多的数组，并返回结果。</p></li><li><p><code>join()</code> – 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</p></li><li><p><code>pop()</code> – 删除并返回数组的最后一个元素。</p></li><li><p><code>shift()</code> – 删除并返回数组的第一个元素。</p></li><li><p><code>unshift()</code> – 向数组的开头添加一个或更多元素，并返回新的长度。</p></li><li><p><code>push()</code> – 向数组的末尾添加一个或更多元素，并返回新的长度。</p></li><li><p><code>reverse()</code> – 颠倒数组中元素的顺序。</p></li><li><p><code>sort()</code> – 对数组的元素进行排序。</p></li><li><p><code>slice()</code> – 从某个已有的数组返回选定的元素</p></li><li><p><a href="http://www.w3school.com.cn/jsref/jsref_splice.asp" target="_blank" rel="noopener"><code>splice()</code></a> – 删除元素，并向数组添加新元素。</p></li><li><p><code>toString()</code> – 把数组转换为字符串，并返回结果。</p></li><li><p><code>toLocaleString()</code> – 把数组转换为本地数组，并返回结果。</p></li></ul><h3 id="常用的DOM方法和DOM属性"><a href="#常用的DOM方法和DOM属性" class="headerlink" title="常用的DOM方法和DOM属性"></a>常用的DOM方法和DOM属性</h3><ul><li><p>创建节点方法</p><ul><li><code>document.createElement()</code> – 创建一个元素节点</li><li><code>document.createTextNode()</code> – 创建一个文本节点</li><li><code>document.createDocumentFragment()</code> – 创建一个DOM片段</li></ul></li><li><p>获取元素节点方法</p><ul><li><code>document.getElementById()</code> – 返回对拥有指定<code>id</code>的第一个对象的引用。</li><li><code>document.getElementsByTagName()</code> – 返回带有指定<code>标签名</code>的对象集合。</li><li><code>document.getElementsByName()</code> – 返回带有指定<code>Name属性</code>的对象集合。</li></ul></li><li><p>操作节点方法</p><ul><li><code>element.appendChild()</code> – 在该节点所有子节点的最后加入一个子节点。</li><li><code>element.insertBefore(new,old)</code> – 在该节点的指定子节点前加入一个子节点。</li><li><code>element.removeChild()</code> – 删除该节点的指定子节点。</li><li><code>element.replaceChild(new,old)</code> – 替换该节点的指定子节点。</li><li><a href="http://www.w3school.com.cn/jsref/met_node_clonenode.asp" target="_blank" rel="noopener"><code>element.cloneNode(boolean)</code></a> – 复制指定节点并返回。参数可选，默认是 false。</li></ul></li><li><p>操作节点属性方法</p><ul><li><code>element.getAttribute()</code> – 获取节点的属性值</li><li><code>element.setAttribute()</code> – 设置节点的属性</li><li><code>element.removeAttribute()</code> – 移除节点的属性</li></ul></li><li><p>获取节点方法<br>-<code>element.firstChild</code> – 获得该节点第一个子节点。</p><ul><li><code>element.lastChild</code> – 获得该节点的最后一个子节点。</li><li><code>element.parentNode()</code> – 获得该节点的父节点。</li><li><code>element.nextSibling</code> – 返回该节点的下一个兄弟节点。</li><li><code>element.previousSibling</code> – 返回该节点的上一个兄弟节点。</li></ul></li><li><p>常用节点属性</p><ul><li><p><code>element.nodeName</code> – 其内容是给定节点的名字。</p></li><li><p><code>element.nodeType</code> – 返回一个整数，这个数值代表着给定节点的类型。<code>1</code>– 元素节点 <code>2</code>– 属性节点 <code>3</code>– 文本节点</p></li><li><p><code>element.nodeValue</code> – 返回给定节点的当前值（字符串）。</p></li><li><p><code>element.innerHTML</code> – 设置节点的内容</p></li></ul></li></ul><h3 id="使用递归来实现深度克隆"><a href="#使用递归来实现深度克隆" class="headerlink" title="使用递归来实现深度克隆"></a>使用<code>递归</code>来实现深度克隆</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用递归来实现深度克隆，可以复制一个目标对象，返回一个完整拷贝</span></span><br><span class="line"><span class="comment"> * 被复制的对象类型会被限制为数字、字符串、布尔、日期、数组、object对象。不会包含函数、正则对象。</span></span><br><span class="line"><span class="comment"> * @param   &#123;Object&#125; obj    目标对象</span></span><br><span class="line"><span class="comment"> * @returns &#123;Object&#125; result 返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对于基本数据类型，只要返回即可</span></span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对于对象分以下三种情况：</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.对于Boolean、Number和String基本包装类型，以及Date引用类型的数据，</span></span><br><span class="line">    <span class="comment">//  需要考虑调用构造函数重新构造，直接赋值依然会有引用问题（不是真正的clone引用变量），</span></span><br><span class="line">    <span class="comment">//  以Date为例：（正常情况下不会显示创建基本包装类型的实例对象，所以此处暂不考虑）</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> result = <span class="keyword">new</span> <span class="built_in">Date</span>(obj.getDate());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.对于数组，需要遍历，这样可以保证在在Array对象上扩展的属性也可以正确复制：</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">        result = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; obj.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">            result[i] = cloneObject(obj[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.对于其他的object也需要遍历：</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        result = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.hasOwnProperty(attr)) &#123; <span class="comment">//忽略掉继承属性，只取属于它本身的属性</span></span><br><span class="line">                result[attr] = cloneObject(obj[attr]);</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>递归：在函数内部调用自身函数</p></blockquote><h3 id="循环绑定事件（作用域）"><a href="#循环绑定事件（作用域）" class="headerlink" title="循环绑定事件（作用域）"></a>循环绑定事件（作用域）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'ul li'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">  nodes[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click '</span> + i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如何解决以上代码存在的问题？（本质：js没有块级作用域）</p></blockquote><ul><li><p><code>IIFE</code>立即执行函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">  <span class="comment">//IIFE</span></span><br><span class="line">  !<span class="function"><span class="keyword">function</span>(<span class="params">node, index</span>)</span>&#123;</span><br><span class="line">    node.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'click '</span> + index);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;(nodes[i], i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用<code>forEach()</code>代替<code>for循环</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[].slice.call(nodes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node, index</span>)</span>&#123;</span><br><span class="line">  node.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click '</span> + index);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>用<code>let</code>替换<code>var</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">  nodes[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click '</span> + i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="闭包（作用域）"><a href="#闭包（作用域）" class="headerlink" title="闭包（作用域）"></a>闭包（作用域）</h3><p>1、定义：<a href="https://www.cnblogs.com/qieguo/p/5457040.html" target="_blank" rel="noopener">有权访问另一个函数作用域内变量的函数都是闭包</a>。</p><p>2、滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><h3 id="10-原型"><a href="#10-原型" class="headerlink" title="10.原型"></a>10.原型</h3><h3 id="11-this"><a href="#11-this" class="headerlink" title="11.this"></a>11.this</h3><h3 id="12-事件代理"><a href="#12-事件代理" class="headerlink" title="12.事件代理"></a>12.事件代理</h3><h3 id="13-Ajax"><a href="#13-Ajax" class="headerlink" title="13.Ajax"></a>13.Ajax</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTML和CSS部分&quot;&gt;&lt;a href=&quot;#HTML和CSS部分&quot; class=&quot;headerlink&quot; title=&quot;HTML和CSS部分&quot;&gt;&lt;/a&gt;&lt;strong&gt;HTML和CSS部分&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;盒模型&quot;&gt;&lt;a href=&quot;#盒
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>外卖平台商家页面（MobileWeb）</title>
    <link href="http://yoursite.com/2018/07/16/vue-sell/"/>
    <id>http://yoursite.com/2018/07/16/vue-sell/</id>
    <published>2018-07-16T10:38:27.747Z</published>
    <updated>2018-07-16T10:40:59.958Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>项目基于Vue框架开发，模仿饿了么商家页面。<br><br>项目源码：</p></blockquote><h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a>项目技术栈</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;项目基于Vue框架开发，模仿饿了么商家页面。&lt;br&gt;&lt;br&gt;项目源码：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;项目技术栈&quot;&gt;&lt;a href=&quot;#项目技术栈&quot; class=&quot;headerlink&quot; title=&quot;项目技术栈&quot;&gt;&lt;/a&gt;项
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动端音乐播放器（MobileWeb）</title>
    <link href="http://yoursite.com/2018/07/16/vue-music/"/>
    <id>http://yoursite.com/2018/07/16/vue-music/</id>
    <published>2018-07-15T17:37:15.352Z</published>
    <updated>2018-07-16T13:43:56.637Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>项目基于Vue框架开发，结构及交互模仿QQ音乐播放器，数据来自QQ音乐线上数据。<br></p></blockquote><blockquote><p>项目源码：<a href="https://github.com/Abelable/vue-music" target="_blank" rel="noopener">https://github.com/Abelable/vue-music</a></p></blockquote><h2 id="项目在线预览"><a href="#项目在线预览" class="headerlink" title="项目在线预览"></a>项目在线预览</h2><blockquote><p>通过axios抓取的线上数据无法正常显示<br> </p></blockquote><p><img src="https://i.imgur.com/8MpHAcm.png" alt=""></p><h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a>项目技术栈</h2><ul><li><code>Vue.js 2.x</code>：MVVM框架</li><li><code>Vue-Router</code>：前端路由</li><li><code>Vuex</code>：状态管理</li><li><code>Webpack 3.x</code>：构建工具</li><li><code>ES6</code>：源码</li><li><code>Stylus</code>：CSS预处理工具</li></ul><h2 id="项目运用的第三方库"><a href="#项目运用的第三方库" class="headerlink" title="项目运用的第三方库"></a>项目运用的第三方库</h2><ul><li><a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">better-scroll</a></li><li><a href="https://github.com/webmodules/jsonp" target="_blank" rel="noopener">jsonp</a></li><li><a href="https://github.com/ustbhuangyi/lyric-parser" target="_blank" rel="noopener">lyric-parser</a></li><li><a href="https://github.com/dankogai/js-base64" target="_blank" rel="noopener">js-base64</a></li><li><a href="https://github.com/ustbhuangyi/storage" target="_blank" rel="noopener">storage</a></li><li><a href="https://github.com/HenrikJoreteg/create-keyframe-animation" target="_blank" rel="noopener">create-keyframe-animation</a></li></ul><h2 id="项目src目录"><a href="#项目src目录" class="headerlink" title="项目src目录"></a>项目src目录</h2><p><img src="https://i.imgur.com/BjmLSZ9.jpg" alt=""></p><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><ul><li><strong>推荐页</strong><ul><li>上部分是一个轮播图组件，使用第三方库<code>better-scroll</code>辅助实现，使用<code>jsonp</code>抓取 QQ音乐(移动端)数据</li><li>下部分是一个歌单推荐列表，使用<code>axios + Node.js</code>代理后端请求，绕过主机限制 (伪造 headers)，抓取 QQ音乐(PC端)数据</li><li>歌单推荐列表图片，使用图片懒加载技术<code>vue-lazyload</code>，优化页面加载速度</li><li>为了更好的用户体验，当数据未请求到时，显示<code>loading</code>组件</li></ul></li><li><strong>推荐页 → 歌单详情页</strong><ul><li>由于歌手的状态较为复杂，这里使用<code>vuex</code>集中管理歌手状态</li><li>这个组件更加注重UX，做了很多类原生APP动画，如下拉图片放大、跟随推动、ios渐进增强的高斯模糊效果<code>backdrop-filter</code>等</li></ul></li><li><strong>歌手页</strong><ul><li>左右联动是这个组件的难点</li><li>左侧是一个歌手列表，使用<code>jsonp</code>抓取QQ音乐(PC端)歌手数据并重组 JSON 数据结构</li><li>列表图片使用懒加载技术<code>vue-lazyload</code>，优化页面加载速度</li><li>右侧是一个字母列表，与左侧歌手列表联动，滚动固定标题实现</li></ul></li><li><strong>歌手页 → 歌手详情页</strong><ul><li>复用歌单详情页，只改变传入的参数，数据同样爬取自QQ音乐</li></ul></li><li><strong>播放器内核页</strong><ul><li>核心组件。用<code>vuex</code>管理各种播放时状态，播放、暂停等功能调用<a href="http://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp" target="_blank" rel="noopener">audio API</a></li><li>播放器可以最大化和最小化</li><li>中部唱片动画使用第三方 JS 动画库<code>create-keyframe-animation</code>实现</li><li>底部操作区图标使用<code>iconfonts</code>。</li><li>抽象了一个横向进度条组件和一个圆形进度条组件，横向进度条可以拖动小球和点击进度条来改变播放进度，圆形进度条组件使用 SVG<code>&lt;circle&gt;</code>元素</li><li>播放模式有：顺序播放、单曲循环、随机播放，原理是调整歌单列表数组</li><li>歌词的爬取利用<code>axios</code>代理后端请求，伪造<code>headers</code>来实现，先将歌词<code>jsonp</code>格式转换为<code>json</code>格式，再使用第三方库<code>js-base64</code>进行<code>Base64</code>解码操作，最后再使用第三方库<code>lyric-parser</code>对歌词进行格式化</li><li>实现了侧滑显示歌词、歌词跟随进度条高亮等交互效果</li><li>增加了当前播放列表组件，可在其中加入/删除歌曲</li></ul></li><li><strong>排行页</strong><ul><li>普通组件（略）</li></ul></li><li><strong>排行页 → 歌单详情页</strong><ul><li>复用歌单详情页（略）</li></ul></li><li><strong>搜索页</strong><ul><li>抓数据，写组件，另外，根据抓取的数据特征，做了上拉刷新的功能</li><li>考虑到数据量大且频繁的问题，对请求做了节流处理</li><li>考虑到移动端键盘占屏的问题，对滚动前的<code>input</code>做了<code>blur()</code>操作</li><li>对搜索历史进行了<code>localstorage</code>缓存，清空搜索历史时使用了改装过的<code>confirm</code>组件</li><li>支持将搜索的歌曲添加到播放列表</li></ul></li><li><strong>个人中心</strong><ul><li>将<code>localstorage</code>中 “我的收藏” 和 “最近播放” 反映到界面上</li></ul></li><li><strong>其他</strong><ul><li>此应用的全部数据来自QQ音乐，推荐页的歌单列表及歌词是利用<code>axios</code>结合<code>node.js</code>代理后端请求抓取的。</li><li>全局通用的应用级状态使用<code>vuex</code>集中管理</li><li>全局引入<code>fastclick</code>库，消除<code>click</code>移动浏览器300ms延迟</li><li>页面是响应式的，适配常见的移动端屏幕，采用<code>flex</code>布局</li></ul></li></ul><h2 id="学习参考"><a href="#学习参考" class="headerlink" title="学习参考"></a>学习参考</h2><ul><li><a href="https://coding.imooc.com/class/107.html" target="_blank" rel="noopener">Vue 2.0高级实战 开发移动端音乐WebAPP</a></li><li><a href="https://github.com/Aaron0525/Vue-music" target="_blank" rel="noopener">Vue2.0搭建的移动端音乐APP</a></li><li><a href="https://www.jianshu.com/p/bee0ed707987" target="_blank" rel="noopener">Vue-music 小知识点</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;项目基于Vue框架开发，结构及交互模仿QQ音乐播放器，数据来自QQ音乐线上数据。&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;项目源码：&lt;a href=&quot;https://github.com/Abelable/vue
      
    
    </summary>
    
    
  </entry>
  
</feed>
